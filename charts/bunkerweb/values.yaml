# Global common variables
imagePullSecrets: []
nameOverride: ""
namespaceOverride: ""
fullnameOverride: ""
nodeSelector: {}
tolerations: []

# Settings related to BW in a k8s environment
settings:
  # Specify the name of an existing secret containing the values of certain sensitive parameters listed here with their corresponding keys :
  # settings.misc.databaseUri : database-uri
  # settings.redis.redisUsername : redis-username
  # settings.redis.redisPassword : redis-password
  # settings.ui.adminUsername : admin-username
  # settings.ui.adminPassword : admin-password
  # settings.ui.flaskSecret: flask-secret
  # settings.ui.totpSecrets: totp-secrets
  # redis.config.password : redis-password
  # mariadb.config.user : mariadb-user
  # mariadb.config.password : mariadb-password
  existingSecret: ""
  kubernetes:
    namespaces: ""
    ingressClass: ""
    domainName: "cluster.local"
  misc:
    databaseUri: ""
    dnsResolvers: "coredns.kube-system.svc.cluster.local"
    apiWhitelistIp: "127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
  redis:
    useRedis: "yes"
    redisHost: ""
    redisUsername: ""
    redisPassword: ""
  ui:
    wizard: true
    ingress:
      enabled: false
      serverName: ""
      serverPath: "/"
      extraAnnotations: {}
      tlsSecretName: ""
    adminUsername: ""
    adminPassword: ""
    overrideAdminCreds: "no"
    flaskSecret: ""
    totpSecrets: ""

# Service
service:
  enabled: true
  type: LoadBalancer
  externalTrafficPolicy: Local
  annotations: {}

# BunkerWeb variables
bunkerweb:
  kind: DaemonSet
  hostPorts: true
  replicas: 1
  repository: bunkerity/bunkerweb
  tag: 1.6.1
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAntiAffinityPreset: 'soft'
  podAnnotations: {}
  podLabels: {}
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  extraEnvs: []
  livenessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck.sh
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
  readinessProbe:
    exec:
      command:
        - /usr/share/bunkerweb/helpers/healthcheck.sh
    initialDelaySeconds: 30
    periodSeconds: 1
    timeoutSeconds: 1
    failureThreshold: 3
  ## PodDisruptionBudget for default backend
  ## bunkerweb Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ## @param bunkerweb.pdb.create Enable Pod Disruption Budget configuration
  ## @param bunkerweb.pdb.minAvailable Minimum number/percentage of Default backend pods that should remain scheduled
  ## @param bunkerweb.pdb.maxUnavailable Maximum number/percentage of Default backend pods that should remain scheduled
  ##
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""

# Scheduler variables
scheduler:
  repository: bunkerity/bunkerweb-scheduler
  tag: 1.6.1
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  podLabels: {}
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  extraEnvs: []
  proLicenseKey: ""
  # todo : probes

# Controller variables
controller:
  enabled: true
  repository: bunkerity/bunkerweb-autoconf
  tag: 1.6.1
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  podLabels: {}
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  extraEnvs: []
  # todo : probes

ui:
  enabled: true
  repository: bunkerity/bunkerweb-ui
  tag: 1.6.1
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  podLabels: {}
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  extraEnvs: []
  # todo : probes
  logs:
    enabled: false
    repository: balabit/syslog-ng
    pullPolicy: Always
    tag: 4.8.0
    persistence:
      size: 5Gi
      storageClass: ""


# Database variables
mariadb:
  enabled: true
  repository: mariadb
  tag: '11'
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  persistence:
    size: 5Gi
    storageClass: ""
  config:
    randomRootPassword: "1"
    database: "db"
    user: "bunkerweb"
    password: "changeme"
  args: []

# Redis variables
redis:
  enabled: true
  repository: redis
  tag: 7-alpine
  pullPolicy: Always
  imagePullSecrets: []
  nodeSelector: {}
  tolerations: []
  config:
    password: "changeme"

# IngressClass variables
ingressClass:
  enabled: true
  name: "bunkerweb"
  controller: "bunkerweb.io/ingress-controller"

# Prometheus variables
prometheus:
  enabled: false
  repository: prom/prometheus
  pullPolicy: Always
  tag: v3.3.1
  replicas: 1
  podAnnotations: {}
  podLabels: {}
  securityContext:
    fsGroup: 65534
  persistence:
    enabled: true
    size: 8Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce

# Grafana variables
grafana:
  enabled: false
  repository: grafana/grafana
  tag: latest
  pullPolicy: IfNotPresent
  replicas: 1
  adminUser: admin
  adminPassword: "" # Leave empty to generate a random password
  # existingSecret: "" # or use an existing secret for the password
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: false
    # className: ""
    # annotations: {}
    #   # kubernetes.io/ingress.class: nginx
    #   # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host: chart-example.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    # tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  persistence:
    enabled: false
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    # annotations: {}

  # Config for Prometheus data source
  prometheusDatasource:
    name: Prometheus
    type: prometheus
    url: 'http://prometheus-{{ include "bunkerweb.fullname" . }}.{{ include "bunkerweb.namespace" . }}.svc:9090' # URL du service Prometheus
    access: proxy
    isDefault: true
  podAnnotations: {}
  podLabels: {}
  securityContext:
    {}
    # fsGroup: 472
    # runAsUser: 472
    # runAsGroup: 472
  # extraEnvs: []
  # sidecar:
  #   dashboards:
  #     enabled: false
  #     label: grafana_dashboard
  #     labelValue: "1"
  #     folder: /tmp/dashboards

# Loki variables
loki:
  enabled: false
  repository: grafana/loki
  tag: 2.9.3
  pullPolicy: IfNotPresent
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteOnce
  retentionPeriod: 168h
  securityContext:
    fsGroup: 10001
  podAnnotations: {}
  podLabels: {}
  # initContainer to fix-permissions (recommended)
  fixPermissionsInitContainer:
    enabled: true
  # extraEnvs: []

# Promtail variables
promtail:
  enabled: false
  repository: grafana/promtail
  tag: 3.5
  pullPolicy: IfNotPresent
  podAnnotations: {}
  podLabels: {}
  serviceAccount:
    create: true
    name: ""
  # extraEnvs: []
  # scrapeConfigs: [] # Personnalisation avanc√©e possible
