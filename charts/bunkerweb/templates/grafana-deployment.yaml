{{- if .Values.grafana.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-{{ include "bunkerweb.fullname" . }}
  namespace: {{ include "bunkerweb.namespace" . }}
  labels:
    {{- include "bunkerweb.labels" . | nindent 4 }}
    app.kubernetes.io/component: grafana
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      {{- include "bunkerweb.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        {{- include "bunkerweb.labels" . | nindent 8 }}
        app.kubernetes.io/component: grafana
        {{- with .Values.grafana.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print .Template.BasePath "/grafana-configmap.yaml") . | sha256sum }}
        {{- with .Values.grafana.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.grafana.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: grafana
          image: "{{ .Values.grafana.repository }}:{{ .Values.grafana.tag }}"
          imagePullPolicy: {{ .Values.grafana.pullPolicy }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.adminUser | quote }}
            {{- if .Values.grafana.existingSecret }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.existingSecret }}
                  key: admin-password
            {{- else if .Values.grafana.adminPassword }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.grafana.adminPassword | quote }}
            {{- else }}
            {{- end }}
            - name: GF_PATHS_DATA
              value: /var/lib/grafana
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
            {{- if .Values.grafana.extraEnvs }}
            {{- toYaml .Values.grafana.extraEnvs | nindent 12 }}
            {{- end }}
          ports:
            - name: grafana
              containerPort: {{ .Values.grafana.service.port }}
              protocol: TCP
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.grafana.service.port }}
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.grafana.service.port }}
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
            periodSeconds: 10
      volumes:
        - name: grafana-datasources
          configMap:
            name: grafana-datasources-{{ include "bunkerweb.fullname" . }}
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards-{{ include "bunkerweb.fullname" . }}
        - name: grafana-storage
          {{- if .Values.grafana.persistence.enabled }}
          persistentVolumeClaim:
            claimName: grafana-data-{{ include "bunkerweb.fullname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- end }}
