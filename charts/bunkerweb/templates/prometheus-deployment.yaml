{{- if .Values.prometheus.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-{{ include "bunkerweb.fullname" . }}
  namespace: {{ include "bunkerweb.namespace" . }}
  labels:
    {{- include "bunkerweb.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.prometheus.replicas | default 1 }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "bunkerweb.selectorLabels" . | nindent 6 }}
      bunkerweb.io/component: "prometheus"
  template:
    metadata:
      labels:
        {{- include "bunkerweb.labels" . | nindent 8 }}
        {{- with .Values.prometheus.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        bunkerweb.io/component: "prometheus"
    spec:
      {{- with .Values.prometheus.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: prometheus
          image: {{ .Values.prometheus.repository }}:{{ .Values.prometheus.tag }}
          imagePullPolicy: {{ .Values.prometheus.pullPolicy }}
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
          ports:
            - containerPort: 9090
              name: web
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/
            - name: data
              mountPath: /prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config-{{ include "bunkerweb.fullname" . }}
        - name: data
          {{- if .Values.prometheus.persistence.enabled }}
          persistentVolumeClaim:
            claimName: prometheus-data-{{ include "bunkerweb.fullname" . }}
          {{- else }}
          emptyDir: {} # Ou un PersistentVolumeClaim si la persistance est n√©cessaire
          {{- end }}
{{- end }}
